#################################################################
# Summary: This Dockerfile builds frontend and backend for gc-web
# It will run the command to start frontend, backend accordingly
# Ex from docker-compose.yml:
#    command:
#      - |
#        cd /opt/app-root/src/frontend
#        npm run start
#
# Or,
#     command:
#      - |
#        cd /opt/app-root/src/backend
#        node index.js

ARG BASE_IMAGE="registry.redhat.io/rhel9/nodejs-18:1-59"
FROM $BASE_IMAGE AS base

ARG APP_UID=1000
ARG APP_GID=1000

USER root

RUN npm uninstall -g yarn pnpm
RUN npm install -g corepack
RUN npm install -g null
RUN corepack prepare --all

RUN groupadd --gid ${APP_GID} gamechanger
RUN useradd --gid ${APP_GID} --uid ${APP_UID} gamechanger
RUN yum install -y \
    git \
    make \
    net-tools \
    iproute \
    iputils \
    python3 \
    pigz \
    gcc

RUN yum -y update libsolv libgcc libstdc++ cryptsetup-libs cyrus-sasl-lib gzip zlib nss xz-libs systemd libksba python3-libxml2 libxml2 libcurl curl

RUN dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm
RUN dnf install -y --nodocs glibc-langpack-en
RUN dnf install -y --nodocs postgresql13-server

RUN dnf clean all && \
    rm -rf /var/cache/dnf

# key dirs & globally usable binaries/packages
ENV APP_ROOT="/opt/app-root"
ENV APP_DIR="${APP_ROOT}/src"
ENV APP_BACKEND_DIR="${APP_DIR}/backend"
ENV APP_FRONTEND_DIR="${APP_DIR}/frontend"
ENV APP_SHARED_DIR="${APP_ROOT}/shared"
ENV APP_SHARED_BIN="${APP_SHARED_DIR}/node_modules/.bin"
ENV PATH="${APP_SHARED_BIN}:${PATH}"
ENV NODE_MODULES_DIR="/usr/local/lib/node_modules"
ENV NPM_DIR="/usr/local/lib/node_modules/npm"
ENV LOGS="/logs/uotapp"

ENV APP_DIR_SECRETS="${APP_ROOT}/src/secrets"
ENV APP_POSTGRES_DIR="${APP_DIR}/postgres"

RUN mkdir -p \
    "${APP_DIR}" \
    "${APP_DIR_SECRETS}" \
    "${APP_FRONTEND_DIR}" \
    "${APP_BACKEND_DIR}" \
    "${APP_SHARED_DIR}" \
    "${APP_POSTGRES_DIR}" \
    "${LOGS}" \
    && chown -R "${APP_UID}":"${APP_GID}" "${APP_ROOT}" \
    && chown -R "${APP_UID}":"${APP_GID}" "${LOGS}"

USER "${APP_UID}":"${APP_GID}"

RUN cd "$APP_SHARED_DIR" \
    && npm install query-string@7.1.3 --save-exact \
    && yarn add -g nodemon sequelize-cli

# Generate cert in host machine before running this
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/tls_cert.cer "${APP_DIR_SECRETS}/tls_cert.cer"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/tls_key.key "${APP_DIR_SECRETS}/tls_key.key"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/ca_bundle.pem "${APP_DIR_SECRETS}/ca_bundle.pem"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/pubkey.key "${APP_DIR_SECRETS}/pubkey.key"

# End of base stage
###################################


##################################
# frontend stage

FROM base as frontend
ARG APP_UID=1000
ARG APP_GID=1000

ARG NPM_PROFILE="dod-advana"
ARG NPM_REGISTRY="https://npm.pkg.github.com"
ARG NPM_AUTH_TOKEN=""

USER "${APP_UID}":"${APP_GID}"
WORKDIR "${APP_FRONTEND_DIR}"
COPY --chown="${APP_UID}":"${APP_GID}" ./frontend/package.json "${APP_FRONTEND_DIR}/package.json"
COPY --chown="${APP_UID}":"${APP_GID}" ./frontend/.npmrc.template "${APP_FRONTEND_DIR}/.npmrc.template"

# NPM_AUTH_TOKEN is set in docker-compose/build.yaml
RUN cat .npmrc.template | envsubst > .npmrc
RUN yarn install --production

# Now copy other files needed for building
COPY --chown="${APP_UID}":"${APP_GID}" ./frontend/cypress "${APP_FRONTEND_DIR}/cypress"
COPY --chown="${APP_UID}":"${APP_GID}" ./frontend/public "${APP_FRONTEND_DIR}/public"
COPY --chown="${APP_UID}":"${APP_GID}" ./frontend/src "${APP_FRONTEND_DIR}/src"
COPY --chown="${APP_UID}":"${APP_GID}" ./frontend/test "${APP_FRONTEND_DIR}/test"
COPY --chown="${APP_UID}":"${APP_GID}" ./frontend/config-overrides.js "${APP_FRONTEND_DIR}/config-overrides.js"
COPY --chown="${APP_UID}":"${APP_GID}" ./frontend/cypress.config.js "${APP_FRONTEND_DIR}/cypress.config.js"
RUN yarn build


##################################
# DEPLOY STAGE
FROM base as deploy
ARG APP_UID=1000
ARG APP_GID=1000

ARG NPM_PROFILE="dod-advana"
ARG NPM_REGISTRY="https://npm.pkg.github.com"
ARG NPM_AUTH_TOKEN=""

USER "${APP_UID}":"${APP_GID}"
WORKDIR "${APP_BACKEND_DIR}"

COPY --chown="${APP_UID}":"${APP_GID}" ./backend/package.json "${APP_BACKEND_DIR}/package.json"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/.npmrc.template "${APP_BACKEND_DIR}/.npmrc.template"

# NPM_AUTH_TOKEN is set in docker-compose/build.yaml
RUN cat .npmrc.template | envsubst > .npmrc
RUN yarn install --production

COPY --from=frontend --chown="${APP_UID}":"${APP_GID}" "${APP_FRONTEND_DIR}/build" "${APP_BACKEND_DIR}/build"
# Now copy other files needed for running
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/node_app "${APP_BACKEND_DIR}/node_app"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/scripts "${APP_BACKEND_DIR}/scripts"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/static "${APP_BACKEND_DIR}/static"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/security_scan "${APP_BACKEND_DIR}/security_can"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/test "${APP_BACKEND_DIR}/test"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/index.js "${APP_BACKEND_DIR}/index.js"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/.env "${APP_BACKEND_DIR}/.env"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/.sequelize-game_changer "${APP_BACKEND_DIR}/.sequelize-game_changer"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/.sequelize-gc-orchestration "${APP_BACKEND_DIR}/.sequelize-gc-orchestration"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/.sequelize-jbook "${APP_BACKEND_DIR}/.sequelize-jbook"
COPY --chown="${APP_UID}":"${APP_GID}" ./backend/.sequelizerc "${APP_BACKEND_DIR}/.sequelizerc"

# http & https
EXPOSE 8990 8443
WORKDIR "${APP_BACKEND_DIR}"
ENTRYPOINT ['/bin/bash', '-ec']
CMD ['node', 'index.js']
